// Generated by CoffeeScript 1.6.2
(function() {
  var LRProtocol, Server;

  LRProtocol = require('livereload-protocol');

  Server = (function() {
    Server.prototype.config = {
      aliases: [
        {
          jade: 'html',
          less: 'css',
          sass: 'css',
          scss: 'css',
          styl: 'css',
          coffee: 'js'
        }
      ],
      applyJsLive: false,
      applyCssLive: true,
      delay: 0,
      exclusions: ['.git/', '.svn/', '.hg/'],
      extensions: ['html', 'jade', 'css', 'less', 'sass', 'scss', 'styl', 'js', 'coffee', 'png', 'gif', 'jpg', 'php', 'php5', 'phtml', 'py', 'rb', 'erb'],
      port: 35729
    };

    Server.prototype.parser = null;

    Server.prototype.protocols = {
      monitoring: [LRProtocol.protocols.MONITORING_7],
      conncheck: [LRProtocol.protocols.CONN_CHECK_1],
      saving: [LRProtocol.protocols.SAVING_1]
    };

    Server.prototype.server = null;

    Server.prototype.sockets = [];

    function Server(config) {
      var attr, value, _i, _len;

      if (config) {
        for (attr = _i = 0, _len = config.length; _i < _len; attr = ++_i) {
          value = config[attr];
          this.config[attr] = value;
        }
      }
      this.parser = new LRProtocol('server', this.protocols);
    }

    Server.prototype.listen = function() {
      this.debug('LiveReload is waiting for browser to connect');
      if (this.config.server) {
        this.config.server.listen(this.config.port);
        this.server = ws.attach(this.config.server);
      } else {
        this.server = ws.listen(this.config.port);
      }
      this.server.on('connection', this.onConnection.bind(this));
      return this.server.on('close', this.onClose.bind(this));
    };

    Server.prototype.onConnection = function(socket) {
      return this.debug('Browser connected');
    };

    Server.prototype.onClose = function(socket) {
      return this.debug('Browser disconnected');
    };

    Server.prototype.debug = function(string) {
      if (this.config.debug) {
        return console.log(string);
      }
    };

    return Server;

  })();

  new Server().listen();

}).call(this);
