// Generated by CoffeeScript 1.6.2
(function() {
  var LRWebSocketServer, ZweLivereload, fs, path;

  fs = require('fs');

  path = require('path');

  LRWebSocketServer = require('livereload-server');

  module.exports = ZweLivereload = (function() {
    ZweLivereload.prototype.config = {
      aliases: {
        jade: 'html',
        less: 'css',
        sass: 'css',
        scss: 'css',
        styl: 'css',
        coffee: 'js'
      },
      applyJsLive: false,
      applyCssLive: true,
      delay: 0,
      exclusions: ['.git/', '.svn/', '.hg/'],
      extensions: ['html', 'jade', 'css', 'less', 'sass', 'scss', 'styl', 'js', 'coffee', 'png', 'gif', 'jpg', 'jpeg', 'php', 'php5', 'phtml', 'py', 'rb', 'erb'],
      port: 35729,
      protocols: {
        monitoring: 7,
        conncheck: 1,
        saving: 1
      }
    };

    ZweLivereload.prototype.debug = true;

    ZweLivereload.prototype.server = null;

    function ZweLivereload(config) {
      var attr, value, _i, _len;

      if (config) {
        for (attr = _i = 0, _len = config.length; _i < _len; attr = ++_i) {
          value = config[attr];
          this.config[attr] = value;
        }
      }
      this.server = new LRWebSocketServer({
        id: 'zwe-livereload',
        name: 'zwe',
        version: '0.0.1',
        protocols: this.config.protocols
      });
      this.server.on('connected', this.onConnected.bind(this));
      this.server.on('disconnected', this.onDisconnected.bind(this));
      this.server.on('command', this.onCommand.bind(this));
      this.server.on('error', this.onError.bind(this));
      this.server.on('livereload.js', this.onLivereloadJs.bind(this));
      this.server.on('httprequest', this.onHttpRequest.bind(this));
    }

    ZweLivereload.prototype.onConnected = function(connection) {
      if (this.debug) {
        return console.log('Client connected (%s)', connection.id);
      }
    };

    ZweLivereload.prototype.onDisconnected = function(connection) {
      if (this.debug) {
        return console.log('Client disconnected (%s)', connection.id);
      }
    };

    ZweLivereload.prototype.onCommand = function(connection, message) {
      if (this.debug) {
        return console.log('Received command %s: %j', message.command, message);
      }
    };

    ZweLivereload.prototype.onError = function(error, connection) {
      if (this.debug) {
        return console.log('Error (%s): %s', connection.id, error.message);
      }
    };

    ZweLivereload.prototype.onLivereloadJs = function(request, response) {
      var _this = this;

      if (this.debug) {
        console.log('Serving livereload.js');
      }
      return fs.readFile(path.join(__dirname, '../resource/livereload.js'), 'utf8', function(error, data) {
        if (error) {
          console.error(error);
        }
        response.writeHead(200, {
          'Content-Length': data.length,
          'Content-Type': 'text/javascript'
        });
        return response.end(data);
      });
    };

    ZweLivereload.prototype.onHttpRequest = function(url, request, response) {
      if (this.debug) {
        console.log(url);
      }
      response.writeHead(404);
      return response.end();
    };

    ZweLivereload.prototype.listen = function(callback) {
      var _this = this;

      if (!callback) {
        callback = function(error) {
          if (error) {
            console.error('Listening failed: %s', error.message);
            return;
          }
          if (_this.debug) {
            return console.log('Listening on port %d', _this.server.port);
          }
        };
      }
      return this.server.listen(callback);
    };

    return ZweLivereload;

  })();

  new ZweLivereload().listen();

}).call(this);
